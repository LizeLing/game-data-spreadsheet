/**
 * Game Data Templates
 * 게임 데이터를 위한 사전 정의된 템플릿
 */

import type { CellType, ValidationRule } from '@types';

export type GameDataTemplateType =
  | 'character'
  | 'item'
  | 'skill'
  | 'quest'
  | 'enemy'
  | 'level'
  | 'dialogue'
  | 'localization'
  | 'statProgression'
  | 'enemyWave'
  | 'dropTable'
  | 'achievement'
  | 'tutorial'
  | 'seasonPass'
  | 'gachaPool';

export interface TemplateColumn {
  id: string;
  name: string;
  type: CellType;
  width?: number;
  validation?: ValidationRule;
  options?: string[];
}

export interface GameDataTemplate {
  type: GameDataTemplateType;
  name: string;
  columns: TemplateColumn[];
  sampleData?: Array<Record<string, any>>;
}

// Character Template
export const getCharacterTemplate = (): GameDataTemplate => ({
  type: 'character',
  name: 'Character Data',
  columns: [
    {
      id: 'id',
      name: 'ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'class',
      name: 'Class',
      type: 'select',
      width: 120,
      options: ['warrior', 'mage', 'rogue', 'cleric', 'ranger', 'paladin'],
    },
    {
      id: 'level',
      name: 'Level',
      type: 'number',
      width: 80,
      validation: {
        type: 'range',
        params: { min: 1, max: 100 },
      },
    },
    {
      id: 'hp',
      name: 'HP',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 1, max: 10000 },
        message: 'HP must be between 1 and 10000',
      },
    },
    {
      id: 'mp',
      name: 'MP',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 0, max: 5000 },
        message: 'MP must be between 0 and 5000',
      },
    },
    {
      id: 'attack',
      name: 'Attack',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 0, max: 1000 },
        message: 'Attack must be between 0 and 1000',
      },
    },
    {
      id: 'defense',
      name: 'Defense',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 0, max: 1000 },
        message: 'Defense must be between 0 and 1000',
      },
    },
    {
      id: 'tags',
      name: 'Tags',
      type: 'multiselect',
      width: 200,
      options: ['melee', 'magic', 'physical', 'tank', 'dps', 'support'],
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 250,
    },
  ],
  sampleData: [
    {
      id: 'char_001',
      name: 'Brave Knight',
      class: 'warrior',
      level: 10,
      hp: 500,
      mp: 100,
      attack: 75,
      defense: 60,
      tags: ['melee', 'physical', 'tank'],
      description: 'A valiant knight with strong defense',
    },
    {
      id: 'char_002',
      name: 'Arcane Wizard',
      class: 'mage',
      level: 10,
      hp: 250,
      mp: 400,
      attack: 120,
      defense: 20,
      tags: ['magic', 'dps'],
      description: 'Master of elemental magic',
    },
    {
      id: 'char_003',
      name: 'Shadow Assassin',
      class: 'rogue',
      level: 10,
      hp: 350,
      mp: 150,
      attack: 100,
      defense: 30,
      tags: ['melee', 'physical', 'dps'],
      description: 'Swift and deadly striker',
    },
    {
      id: 'char_004',
      name: 'Holy Cleric',
      class: 'cleric',
      level: 10,
      hp: 400,
      mp: 300,
      attack: 50,
      defense: 50,
      tags: ['magic', 'support', 'healer'],
      description: 'Divine healer who mends wounds',
    },
    {
      id: 'char_005',
      name: 'Forest Ranger',
      class: 'ranger',
      level: 10,
      hp: 380,
      mp: 200,
      attack: 85,
      defense: 45,
      tags: ['ranged', 'physical', 'dps'],
      description: 'Skilled archer who never misses',
    },
    {
      id: 'char_006',
      name: 'Paladin Champion',
      class: 'paladin',
      level: 10,
      hp: 550,
      mp: 250,
      attack: 70,
      defense: 70,
      tags: ['melee', 'physical', 'tank'],
      description: 'Holy warrior who protects allies',
    },
    {
      id: 'char_007',
      name: 'Battle Mage',
      class: 'mage',
      level: 8,
      hp: 280,
      mp: 350,
      attack: 95,
      defense: 35,
      tags: ['magic', 'ranged', 'dps'],
      description: 'Mage specialized in combat magic',
    },
    {
      id: 'char_008',
      name: 'Berserker',
      class: 'warrior',
      level: 12,
      hp: 600,
      mp: 80,
      attack: 110,
      defense: 50,
      tags: ['melee', 'physical', 'dps'],
      description: 'Fierce warrior who deals massive damage',
    },
    {
      id: 'char_009',
      name: 'Ninja',
      class: 'rogue',
      level: 9,
      hp: 320,
      mp: 180,
      attack: 88,
      defense: 38,
      tags: ['melee', 'stealth', 'dps'],
      description: 'Swift ninja with deadly precision',
    },
    {
      id: 'char_010',
      name: 'Druid',
      class: 'cleric',
      level: 11,
      hp: 420,
      mp: 320,
      attack: 55,
      defense: 48,
      tags: ['magic', 'support', 'healer'],
      description: 'Nature priest who channels life energy',
    },
  ],
});

// Item Template
export const getItemTemplate = (): GameDataTemplate => ({
  type: 'item',
  name: 'Item Data',
  columns: [
    {
      id: 'id',
      name: 'ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'type',
      name: 'Type',
      type: 'select',
      width: 120,
      options: ['weapon', 'armor', 'accessory', 'consumable', 'material'],
    },
    {
      id: 'rarity',
      name: 'Rarity',
      type: 'select',
      width: 120,
      options: ['common', 'uncommon', 'rare', 'epic', 'legendary'],
    },
    {
      id: 'level',
      name: 'Level',
      type: 'number',
      width: 80,
    },
    {
      id: 'buyPrice',
      name: 'Buy Price',
      type: 'number',
      width: 100,
    },
    {
      id: 'sellPrice',
      name: 'Sell Price',
      type: 'number',
      width: 100,
    },
    {
      id: 'attack',
      name: 'Attack',
      type: 'number',
      width: 100,
    },
    {
      id: 'defense',
      name: 'Defense',
      type: 'number',
      width: 100,
    },
    {
      id: 'tags',
      name: 'Tags',
      type: 'multiselect',
      width: 200,
      options: ['weapon', 'armor', 'consumable', 'quest', 'tradable', 'bound'],
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 250,
    },
  ],
  sampleData: [
    {
      id: 'item_001',
      name: 'Steel Sword',
      type: 'weapon',
      rarity: 'uncommon',
      level: 10,
      buyPrice: 500,
      sellPrice: 125,
      attack: 45,
      defense: 0,
      tags: ['weapon', 'tradable'],
      description: 'A sturdy blade forged from quality steel',
    },
    {
      id: 'item_002',
      name: 'Leather Armor',
      type: 'armor',
      rarity: 'common',
      level: 5,
      buyPrice: 200,
      sellPrice: 50,
      attack: 0,
      defense: 25,
      tags: ['armor', 'tradable'],
      description: 'Basic leather protection for adventurers',
    },
    {
      id: 'item_003',
      name: 'Health Potion',
      type: 'consumable',
      rarity: 'common',
      level: 1,
      buyPrice: 50,
      sellPrice: 10,
      attack: 0,
      defense: 0,
      tags: ['consumable', 'tradable'],
      description: 'Restores 100 HP',
    },
    {
      id: 'item_004',
      name: 'Iron Shield',
      type: 'armor',
      rarity: 'uncommon',
      level: 8,
      buyPrice: 400,
      sellPrice: 100,
      attack: 0,
      defense: 40,
      tags: ['armor', 'tradable'],
      description: 'Solid iron shield for blocking attacks',
    },
    {
      id: 'item_005',
      name: 'Mana Potion',
      type: 'consumable',
      rarity: 'common',
      level: 1,
      buyPrice: 60,
      sellPrice: 15,
      attack: 0,
      defense: 0,
      tags: ['consumable', 'tradable'],
      description: 'Restores 80 MP',
    },
    {
      id: 'item_006',
      name: 'Mystic Staff',
      type: 'weapon',
      rarity: 'rare',
      level: 15,
      buyPrice: 1200,
      sellPrice: 300,
      attack: 65,
      defense: 0,
      tags: ['weapon', 'magic', 'tradable'],
      description: 'Staff imbued with magical power',
    },
    {
      id: 'item_007',
      name: 'Dragon Scale Armor',
      type: 'armor',
      rarity: 'epic',
      level: 20,
      buyPrice: 5000,
      sellPrice: 1250,
      attack: 0,
      defense: 120,
      tags: ['armor', 'bound'],
      description: 'Armor crafted from dragon scales',
    },
    {
      id: 'item_008',
      name: 'Elven Bow',
      type: 'weapon',
      rarity: 'rare',
      level: 12,
      buyPrice: 800,
      sellPrice: 200,
      attack: 55,
      defense: 0,
      tags: ['weapon', 'tradable'],
      description: 'Bow crafted by elven artisans',
    },
    {
      id: 'item_009',
      name: 'Quest Scroll',
      type: 'quest',
      rarity: 'common',
      level: 1,
      buyPrice: 0,
      sellPrice: 0,
      attack: 0,
      defense: 0,
      tags: ['quest', 'bound'],
      description: 'A mysterious quest scroll',
    },
    {
      id: 'item_010',
      name: 'Phoenix Feather',
      type: 'consumable',
      rarity: 'legendary',
      level: 30,
      buyPrice: 10000,
      sellPrice: 2500,
      attack: 0,
      defense: 0,
      tags: ['consumable', 'bound'],
      description: 'Revives fallen ally with full HP',
    },
  ],
});

// Skill Template
export const getSkillTemplate = (): GameDataTemplate => ({
  type: 'skill',
  name: 'Skill Data',
  columns: [
    {
      id: 'id',
      name: 'ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'type',
      name: 'Type',
      type: 'select',
      width: 120,
      options: ['active', 'passive', 'ultimate', 'support'],
    },
    {
      id: 'manaCost',
      name: 'Mana Cost',
      type: 'number',
      width: 100,
    },
    {
      id: 'cooldown',
      name: 'Cooldown',
      type: 'number',
      width: 100,
    },
    {
      id: 'damage',
      name: 'Damage',
      type: 'text',
      width: 150,
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 250,
    },
  ],
  sampleData: [
    {
      id: 'skill_001',
      name: 'Fireball',
      type: 'active',
      manaCost: 30,
      cooldown: 5,
      damage: '80-120',
      description: 'Launches a ball of fire at the target',
    },
    {
      id: 'skill_002',
      name: 'Shield Bash',
      type: 'active',
      manaCost: 15,
      cooldown: 8,
      damage: '40-60',
      description: 'Bash with shield, stunning the target for 2 seconds',
    },
    {
      id: 'skill_003',
      name: 'Critical Strike',
      type: 'passive',
      manaCost: 0,
      cooldown: 0,
      damage: '+50% crit damage',
      description: 'Increases critical strike damage',
    },
    {
      id: 'skill_004',
      name: 'Holy Light',
      type: 'active',
      manaCost: 40,
      cooldown: 10,
      damage: 'Heal 150-200',
      description: 'Heals target ally with divine light',
    },
    {
      id: 'skill_005',
      name: 'Poison Arrow',
      type: 'active',
      manaCost: 20,
      cooldown: 6,
      damage: '50-70 + 20 DoT',
      description: 'Shoots poisoned arrow dealing damage over time',
    },
    {
      id: 'skill_006',
      name: 'Berserk Rage',
      type: 'active',
      manaCost: 50,
      cooldown: 30,
      damage: '+100% attack for 10s',
      description: 'Enter berserk state, doubling attack power',
    },
    {
      id: 'skill_007',
      name: 'Stealth',
      type: 'active',
      manaCost: 25,
      cooldown: 20,
      damage: 'Invisibility',
      description: 'Become invisible for 8 seconds',
    },
    {
      id: 'skill_008',
      name: 'Thunder Strike',
      type: 'active',
      manaCost: 60,
      cooldown: 12,
      damage: '150-200',
      description: 'Call lightning to strike enemies',
    },
    {
      id: 'skill_009',
      name: 'Iron Skin',
      type: 'passive',
      manaCost: 0,
      cooldown: 0,
      damage: '+30% defense',
      description: 'Permanently increases defense',
    },
    {
      id: 'skill_010',
      name: 'Multi-Shot',
      type: 'active',
      manaCost: 35,
      cooldown: 8,
      damage: '60-80 x3 targets',
      description: 'Fires arrows at multiple targets',
    },
  ],
});

// Quest Template
export const getQuestTemplate = (): GameDataTemplate => ({
  type: 'quest',
  name: 'Quest Data',
  columns: [
    {
      id: 'id',
      name: 'ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 200,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'type',
      name: 'Type',
      type: 'select',
      width: 120,
      options: ['main', 'side', 'daily', 'event'],
    },
    {
      id: 'level',
      name: 'Level',
      type: 'number',
      width: 80,
    },
    {
      id: 'rewardExp',
      name: 'Reward EXP',
      type: 'number',
      width: 120,
    },
    {
      id: 'rewardGold',
      name: 'Reward Gold',
      type: 'number',
      width: 120,
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 300,
    },
  ],
  sampleData: [
    {
      id: 'quest_001',
      name: 'The Lost Sword',
      type: 'main',
      level: 5,
      rewardExp: 500,
      rewardGold: 100,
      description: 'Find the legendary sword hidden in the ancient ruins',
    },
    {
      id: 'quest_002',
      name: 'Daily Training',
      type: 'daily',
      level: 1,
      rewardExp: 100,
      rewardGold: 50,
      description: 'Complete 10 combat encounters',
    },
    {
      id: 'quest_003',
      name: 'Herb Gathering',
      type: 'side',
      level: 3,
      rewardExp: 200,
      rewardGold: 75,
      description: 'Collect 20 healing herbs from the forest',
    },
    {
      id: 'quest_004',
      name: 'Dragon Slayer',
      type: 'main',
      level: 30,
      rewardExp: 5000,
      rewardGold: 2000,
      description: 'Defeat the ancient dragon terrorizing the kingdom',
    },
    {
      id: 'quest_005',
      name: 'Bounty Hunter',
      type: 'repeatable',
      level: 15,
      rewardExp: 800,
      rewardGold: 300,
      description: 'Hunt down 5 wanted criminals',
    },
    {
      id: 'quest_006',
      name: 'Deliver Supplies',
      type: 'side',
      level: 5,
      rewardExp: 150,
      rewardGold: 80,
      description: 'Deliver food supplies to the remote village',
    },
    {
      id: 'quest_007',
      name: 'Arena Challenge',
      type: 'weekly',
      level: 20,
      rewardExp: 1500,
      rewardGold: 500,
      description: 'Win 5 arena battles this week',
    },
    {
      id: 'quest_008',
      name: 'Rescue Mission',
      type: 'main',
      level: 12,
      rewardExp: 1000,
      rewardGold: 250,
      description: 'Rescue the kidnapped princess from bandits',
    },
    {
      id: 'quest_009',
      name: 'Fishing Competition',
      type: 'event',
      level: 1,
      rewardExp: 300,
      rewardGold: 150,
      description: 'Catch the biggest fish in the competition',
    },
    {
      id: 'quest_010',
      name: 'Ancient Artifact',
      type: 'side',
      level: 25,
      rewardExp: 2000,
      rewardGold: 800,
      description: 'Retrieve the ancient artifact from cursed tomb',
    },
  ],
});

// Enemy Template
export const getEnemyTemplate = (): GameDataTemplate => ({
  type: 'enemy',
  name: 'Enemy Data',
  columns: [
    {
      id: 'id',
      name: 'ID',
      type: 'text',
      width: 100,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'level',
      name: 'Level',
      type: 'number',
      width: 80,
      validation: {
        type: 'range',
        params: { min: 1, max: 100 },
      },
    },
    {
      id: 'type',
      name: 'Type',
      type: 'select',
      width: 120,
      options: ['normal', 'elite', 'boss', 'miniboss'],
    },
    {
      id: 'hp',
      name: 'HP',
      type: 'number',
      width: 100,
    },
    {
      id: 'attack',
      name: 'Attack',
      type: 'number',
      width: 100,
    },
    {
      id: 'defense',
      name: 'Defense',
      type: 'number',
      width: 100,
    },
    {
      id: 'speed',
      name: 'Speed',
      type: 'number',
      width: 80,
    },
    {
      id: 'exp',
      name: 'EXP',
      type: 'number',
      width: 100,
    },
    {
      id: 'goldDrop',
      name: 'Gold Drop',
      type: 'number',
      width: 100,
    },
    {
      id: 'abilities',
      name: 'Abilities',
      type: 'text',
      width: 200,
    },
  ],
  sampleData: [
    {
      id: 'enemy_001',
      name: 'Goblin Scout',
      level: 5,
      type: 'normal',
      hp: 150,
      attack: 25,
      defense: 10,
      speed: 8,
      exp: 50,
      goldDrop: 10,
      abilities: 'Quick Strike',
    },
    {
      id: 'enemy_002',
      name: 'Orc Warrior',
      level: 10,
      type: 'elite',
      hp: 500,
      attack: 55,
      defense: 35,
      speed: 6,
      exp: 150,
      goldDrop: 50,
      abilities: 'Power Smash, Rage',
    },
    {
      id: 'enemy_003',
      name: 'Dark Wizard',
      level: 15,
      type: 'elite',
      hp: 350,
      attack: 80,
      defense: 20,
      speed: 10,
      exp: 200,
      goldDrop: 75,
      abilities: 'Shadow Bolt, Dark Shield',
    },
    {
      id: 'enemy_004',
      name: 'Stone Golem',
      level: 20,
      type: 'miniboss',
      hp: 1200,
      attack: 70,
      defense: 90,
      speed: 3,
      exp: 500,
      goldDrop: 150,
      abilities: 'Boulder Throw, Earthquake',
    },
    {
      id: 'enemy_005',
      name: 'Zombie',
      level: 8,
      type: 'normal',
      hp: 200,
      attack: 30,
      defense: 15,
      speed: 4,
      exp: 60,
      goldDrop: 15,
      abilities: 'Bite, Infect',
    },
    {
      id: 'enemy_006',
      name: 'Fire Elemental',
      level: 25,
      type: 'elite',
      hp: 800,
      attack: 120,
      defense: 40,
      speed: 12,
      exp: 600,
      goldDrop: 200,
      abilities: 'Fireball, Immolate',
    },
    {
      id: 'enemy_007',
      name: 'Dragon',
      level: 50,
      type: 'boss',
      hp: 10000,
      attack: 300,
      defense: 150,
      speed: 15,
      exp: 5000,
      goldDrop: 2000,
      abilities: 'Dragon Breath, Tail Swipe, Flight',
    },
    {
      id: 'enemy_008',
      name: 'Skeleton Archer',
      level: 12,
      type: 'normal',
      hp: 250,
      attack: 45,
      defense: 18,
      speed: 9,
      exp: 100,
      goldDrop: 30,
      abilities: 'Poison Arrow, Rapid Fire',
    },
    {
      id: 'enemy_009',
      name: 'Ice Troll',
      level: 30,
      type: 'miniboss',
      hp: 2000,
      attack: 100,
      defense: 70,
      speed: 5,
      exp: 800,
      goldDrop: 300,
      abilities: 'Ice Smash, Frost Armor',
    },
    {
      id: 'enemy_010',
      name: 'Shadow Assassin',
      level: 35,
      type: 'elite',
      hp: 600,
      attack: 150,
      defense: 50,
      speed: 18,
      exp: 1000,
      goldDrop: 400,
      abilities: 'Backstab, Vanish, Poison Blade',
    },
  ],
});

// Level/Stage Template
export const getLevelTemplate = (): GameDataTemplate => ({
  type: 'level',
  name: 'Level/Stage Data',
  columns: [
    {
      id: 'id',
      name: 'Level ID',
      type: 'text',
      width: 100,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'name',
      name: 'Level Name',
      type: 'text',
      width: 180,
      validation: { type: 'required', message: 'Name is required' },
    },
    {
      id: 'world',
      name: 'World',
      type: 'select',
      width: 120,
      options: ['grassland', 'desert', 'snow', 'volcano', 'dungeon'],
    },
    {
      id: 'recommendedLevel',
      name: 'Rec. Level',
      type: 'number',
      width: 100,
    },
    {
      id: 'enemies',
      name: 'Enemies',
      type: 'text',
      width: 200,
    },
    {
      id: 'objectives',
      name: 'Objectives',
      type: 'text',
      width: 250,
    },
    {
      id: 'rewards',
      name: 'Rewards',
      type: 'text',
      width: 200,
    },
  ],
  sampleData: [
    {
      id: 'level_001',
      name: 'Goblin Hideout',
      world: 'grassland',
      recommendedLevel: 5,
      enemies: 'Goblin Scout x3, Goblin Warrior x1',
      objectives: 'Defeat all goblins',
      rewards: '200 EXP, 50 Gold, Iron Sword',
    },
    {
      id: 'level_002',
      name: 'Desert Oasis',
      world: 'desert',
      recommendedLevel: 10,
      enemies: 'Sand Scorpion x5, Desert Bandit x2',
      objectives: 'Find the hidden water source',
      rewards: '400 EXP, 100 Gold, Desert Amulet',
    },
    {
      id: 'level_003',
      name: 'Frozen Cave',
      world: 'snow',
      recommendedLevel: 15,
      enemies: 'Ice Wolf x4, Yeti x1',
      objectives: 'Retrieve the ice crystal',
      rewards: '600 EXP, 200 Gold, Frost Staff',
    },
    {
      id: 'level_004',
      name: 'Volcano Depths',
      world: 'volcano',
      recommendedLevel: 20,
      enemies: 'Fire Elemental x3, Lava Golem x2',
      objectives: 'Survive the heat waves',
      rewards: '800 EXP, 300 Gold, Flame Shield',
    },
    {
      id: 'level_005',
      name: 'Dark Dungeon',
      world: 'dungeon',
      recommendedLevel: 12,
      enemies: 'Skeleton Warrior x6, Necromancer x1',
      objectives: 'Clear all rooms',
      rewards: '500 EXP, 150 Gold, Dark Blade',
    },
    {
      id: 'level_006',
      name: 'Ancient Temple',
      world: 'dungeon',
      recommendedLevel: 25,
      enemies: 'Stone Guardian x2, Cursed Mummy x3',
      objectives: 'Activate all 4 pillars',
      rewards: '1000 EXP, 400 Gold, Ancient Relic',
    },
    {
      id: 'level_007',
      name: 'Enchanted Forest',
      world: 'grassland',
      recommendedLevel: 8,
      enemies: 'Wild Boar x5, Forest Troll x1',
      objectives: 'Protect the sacred tree',
      rewards: '300 EXP, 80 Gold, Nature Bow',
    },
    {
      id: 'level_008',
      name: 'Sky Fortress',
      world: 'grassland',
      recommendedLevel: 30,
      enemies: 'Harpy x4, Wind Elemental x2, Sky Knight x1',
      objectives: 'Reach the tower top',
      rewards: '1500 EXP, 600 Gold, Wing Boots',
    },
    {
      id: 'level_009',
      name: 'Molten Core',
      world: 'volcano',
      recommendedLevel: 35,
      enemies: 'Fire Drake x2, Magma Beast x3',
      objectives: 'Defeat the Fire Lord',
      rewards: '2000 EXP, 800 Gold, Inferno Sword',
    },
    {
      id: 'level_010',
      name: 'Crystal Caverns',
      world: 'dungeon',
      recommendedLevel: 18,
      enemies: 'Crystal Spider x6, Crystal Golem x2',
      objectives: 'Mine 10 rare crystals',
      rewards: '700 EXP, 250 Gold, Crystal Armor',
    },
  ],
});

// Dialogue Template
export const getDialogueTemplate = (): GameDataTemplate => ({
  type: 'dialogue',
  name: 'Dialogue/Narrative Data',
  columns: [
    {
      id: 'id',
      name: 'Line ID',
      type: 'text',
      width: 100,
      validation: { type: 'required', message: 'ID is required' },
    },
    {
      id: 'character',
      name: 'Character',
      type: 'text',
      width: 120,
    },
    {
      id: 'emotion',
      name: 'Emotion',
      type: 'select',
      width: 100,
      options: ['neutral', 'happy', 'sad', 'angry', 'surprised', 'fearful'],
    },
    {
      id: 'text',
      name: 'Dialogue Text',
      type: 'text',
      width: 400,
    },
    {
      id: 'nextLine',
      name: 'Next Line',
      type: 'text',
      width: 100,
    },
    {
      id: 'choices',
      name: 'Player Choices',
      type: 'text',
      width: 200,
    },
  ],
  sampleData: [
    {
      id: 'dlg_001',
      character: 'Village Elder',
      emotion: 'neutral',
      text: 'Welcome, brave adventurer. Our village needs your help.',
      nextLine: 'dlg_002',
      choices: '',
    },
    {
      id: 'dlg_002',
      character: 'Player',
      emotion: 'neutral',
      text: 'What seems to be the problem?',
      nextLine: 'dlg_003',
      choices: '',
    },
    {
      id: 'dlg_003',
      character: 'Village Elder',
      emotion: 'sad',
      text: 'Goblins have been raiding our farms every night.',
      nextLine: 'dlg_004',
      choices: 'dlg_004a|dlg_004b',
    },
    {
      id: 'dlg_004a',
      character: 'Player',
      emotion: 'neutral',
      text: 'I will help you defeat them.',
      nextLine: 'dlg_005',
      choices: '',
    },
    {
      id: 'dlg_004b',
      character: 'Player',
      emotion: 'neutral',
      text: 'Perhaps we can negotiate with them?',
      nextLine: 'dlg_006',
      choices: '',
    },
    {
      id: 'dlg_005',
      character: 'Village Elder',
      emotion: 'happy',
      text: 'Thank you! May the gods protect you on your journey.',
      nextLine: '',
      choices: '',
    },
    {
      id: 'dlg_006',
      character: 'Village Elder',
      emotion: 'surprised',
      text: 'Negotiate? These creatures only understand violence!',
      nextLine: 'dlg_007',
      choices: '',
    },
    {
      id: 'dlg_007',
      character: 'Mysterious Merchant',
      emotion: 'neutral',
      text: 'I might have something that could help you...',
      nextLine: 'dlg_008',
      choices: '',
    },
    {
      id: 'dlg_008',
      character: 'Guard Captain',
      emotion: 'angry',
      text: 'Those goblins took my best men! We must strike back!',
      nextLine: 'dlg_009',
      choices: '',
    },
    {
      id: 'dlg_009',
      character: 'Oracle',
      emotion: 'fearful',
      text: 'I sense a dark presence in the forest. Be very careful...',
      nextLine: 'dlg_010',
      choices: '',
    },
    {
      id: 'dlg_010',
      character: 'Player',
      emotion: 'neutral',
      text: 'I am ready for whatever lies ahead.',
      nextLine: '',
      choices: '',
    },
  ],
});

// Localization Template
export const getLocalizationTemplate = (): GameDataTemplate => ({
  type: 'localization',
  name: 'Localization Data',
  columns: [
    {
      id: 'key',
      name: 'Translation Key',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Key is required' },
    },
    {
      id: 'en',
      name: 'English',
      type: 'text',
      width: 200,
    },
    {
      id: 'ko',
      name: 'Korean',
      type: 'text',
      width: 200,
    },
    {
      id: 'ja',
      name: 'Japanese',
      type: 'text',
      width: 200,
    },
    {
      id: 'zh',
      name: 'Chinese',
      type: 'text',
      width: 200,
    },
    {
      id: 'context',
      name: 'Context',
      type: 'text',
      width: 150,
    },
  ],
  sampleData: [
    {
      key: 'ui.menu.start',
      en: 'Start Game',
      ko: '게임 시작',
      ja: 'ゲーム開始',
      zh: '开始游戏',
      context: 'Main menu button',
    },
    {
      key: 'ui.menu.continue',
      en: 'Continue',
      ko: '계속하기',
      ja: '続ける',
      zh: '继续',
      context: 'Main menu button',
    },
    {
      key: 'ui.menu.settings',
      en: 'Settings',
      ko: '설정',
      ja: '設定',
      zh: '设置',
      context: 'Main menu button',
    },
    {
      key: 'ui.menu.exit',
      en: 'Exit',
      ko: '종료',
      ja: '終了',
      zh: '退出',
      context: 'Main menu button',
    },
    {
      key: 'ui.hud.health',
      en: 'Health',
      ko: '체력',
      ja: 'ヘルス',
      zh: '生命值',
      context: 'HUD display',
    },
    {
      key: 'ui.hud.mana',
      en: 'Mana',
      ko: '마나',
      ja: 'マナ',
      zh: '魔法值',
      context: 'HUD display',
    },
    {
      key: 'ui.inventory.title',
      en: 'Inventory',
      ko: '인벤토리',
      ja: 'インベントリ',
      zh: '背包',
      context: 'Inventory screen title',
    },
    {
      key: 'ui.dialog.confirm',
      en: 'Confirm',
      ko: '확인',
      ja: '確認',
      zh: '确认',
      context: 'Dialog button',
    },
    {
      key: 'ui.dialog.cancel',
      en: 'Cancel',
      ko: '취소',
      ja: 'キャンセル',
      zh: '取消',
      context: 'Dialog button',
    },
    {
      key: 'quest.completed',
      en: 'Quest Completed!',
      ko: '퀘스트 완료!',
      ja: 'クエスト完了！',
      zh: '任务完成！',
      context: 'Quest completion message',
    },
  ],
});

// Stat Progression Template
export const getStatProgressionTemplate = (): GameDataTemplate => ({
  type: 'statProgression',
  name: 'Stat Progression Data',
  columns: [
    {
      id: 'level',
      name: 'Level',
      type: 'number',
      width: 80,
      validation: {
        type: 'range',
        params: { min: 1, max: 100 },
      },
    },
    {
      id: 'expRequired',
      name: 'EXP Required',
      type: 'number',
      width: 120,
    },
    {
      id: 'hpBase',
      name: 'Base HP',
      type: 'number',
      width: 100,
    },
    {
      id: 'mpBase',
      name: 'Base MP',
      type: 'number',
      width: 100,
    },
    {
      id: 'attackBase',
      name: 'Base Attack',
      type: 'number',
      width: 100,
    },
    {
      id: 'defenseBase',
      name: 'Base Defense',
      type: 'number',
      width: 100,
    },
    {
      id: 'speedBase',
      name: 'Base Speed',
      type: 'number',
      width: 100,
    },
    {
      id: 'skillPoints',
      name: 'Skill Points',
      type: 'number',
      width: 100,
    },
  ],
  sampleData: [
    {
      level: 1,
      expRequired: 0,
      hpBase: 100,
      mpBase: 50,
      attackBase: 10,
      defenseBase: 5,
      speedBase: 10,
      skillPoints: 1,
    },
    {
      level: 2,
      expRequired: 100,
      hpBase: 110,
      mpBase: 55,
      attackBase: 12,
      defenseBase: 6,
      speedBase: 11,
      skillPoints: 1,
    },
    {
      level: 3,
      expRequired: 250,
      hpBase: 121,
      mpBase: 61,
      attackBase: 14,
      defenseBase: 7,
      speedBase: 12,
      skillPoints: 2,
    },
    {
      level: 4,
      expRequired: 450,
      hpBase: 133,
      mpBase: 67,
      attackBase: 17,
      defenseBase: 9,
      speedBase: 13,
      skillPoints: 2,
    },
    {
      level: 5,
      expRequired: 700,
      hpBase: 146,
      mpBase: 74,
      attackBase: 20,
      defenseBase: 11,
      speedBase: 14,
      skillPoints: 3,
    },
    {
      level: 6,
      expRequired: 1000,
      hpBase: 161,
      mpBase: 81,
      attackBase: 24,
      defenseBase: 13,
      speedBase: 15,
      skillPoints: 3,
    },
    {
      level: 7,
      expRequired: 1400,
      hpBase: 177,
      mpBase: 89,
      attackBase: 28,
      defenseBase: 16,
      speedBase: 16,
      skillPoints: 4,
    },
    {
      level: 8,
      expRequired: 1900,
      hpBase: 195,
      mpBase: 98,
      attackBase: 33,
      defenseBase: 19,
      speedBase: 17,
      skillPoints: 4,
    },
    {
      level: 9,
      expRequired: 2500,
      hpBase: 215,
      mpBase: 108,
      attackBase: 39,
      defenseBase: 23,
      speedBase: 18,
      skillPoints: 5,
    },
    {
      level: 10,
      expRequired: 3200,
      hpBase: 237,
      mpBase: 119,
      attackBase: 46,
      defenseBase: 27,
      speedBase: 20,
      skillPoints: 5,
    },
  ],
});

// Template factory
export const getTemplate = (type: GameDataTemplateType): GameDataTemplate => {
  switch (type) {
    case 'character':
      return getCharacterTemplate();
    case 'item':
      return getItemTemplate();
    case 'skill':
      return getSkillTemplate();
    case 'quest':
      return getQuestTemplate();
    case 'enemy':
      return getEnemyTemplate();
    case 'level':
      return getLevelTemplate();
    case 'dialogue':
      return getDialogueTemplate();
    case 'localization':
      return getLocalizationTemplate();
    case 'statProgression':
      return getStatProgressionTemplate();
    default:
      throw new Error(`Unknown template type: ${type}`);
  }
};

// Get all available templates
export const getAllTemplates = (): GameDataTemplate[] => {
  return [
    getCharacterTemplate(),
    getItemTemplate(),
    getSkillTemplate(),
    getQuestTemplate(),
    getEnemyTemplate(),
    getLevelTemplate(),
    getDialogueTemplate(),
    getLocalizationTemplate(),
    getStatProgressionTemplate(),
    getEnemyWaveTemplate(),
    getDropTableTemplate(),
    getAchievementTemplate(),
    getTutorialTemplate(),
    getSeasonPassTemplate(),
    getGachaPoolTemplate(),
  ];
};

// Enemy Wave Template
export const getEnemyWaveTemplate = (): GameDataTemplate => ({
  type: 'enemyWave',
  name: 'Enemy Wave Data',
  columns: [
    {
      id: 'waveId',
      name: 'Wave ID',
      type: 'text',
      width: 100,
      validation: { type: 'required', message: 'Wave ID is required' },
    },
    {
      id: 'stageName',
      name: 'Stage Name',
      type: 'text',
      width: 150,
    },
    {
      id: 'waveNumber',
      name: 'Wave #',
      type: 'number',
      width: 80,
    },
    {
      id: 'enemyType',
      name: 'Enemy Type',
      type: 'text',
      width: 120,
    },
    {
      id: 'count',
      name: 'Count',
      type: 'number',
      width: 80,
      validation: {
        type: 'range',
        params: { min: 1, max: 100 },
      },
    },
    {
      id: 'spawnDelay',
      name: 'Spawn Delay (sec)',
      type: 'number',
      width: 120,
    },
    {
      id: 'isBoss',
      name: 'Is Boss',
      type: 'boolean',
      width: 80,
    },
    {
      id: 'rewards',
      name: 'Rewards',
      type: 'text',
      width: 200,
    },
  ],
  sampleData: [
    {
      waveId: 'wave-1-1',
      stageName: 'Forest Entry',
      waveNumber: 1,
      enemyType: 'goblin',
      count: 5,
      spawnDelay: 2,
      isBoss: false,
      rewards: 'gold:100, exp:50',
    },
    {
      waveId: 'wave-1-2',
      stageName: 'Forest Entry',
      waveNumber: 2,
      enemyType: 'wolf',
      count: 3,
      spawnDelay: 3,
      isBoss: false,
      rewards: 'gold:150, exp:75',
    },
    {
      waveId: 'wave-1-3',
      stageName: 'Forest Entry',
      waveNumber: 3,
      enemyType: 'orc',
      count: 2,
      spawnDelay: 4,
      isBoss: false,
      rewards: 'gold:200, exp:100',
    },
    {
      waveId: 'wave-1-boss',
      stageName: 'Forest Entry',
      waveNumber: 4,
      enemyType: 'forest_troll',
      count: 1,
      spawnDelay: 5,
      isBoss: true,
      rewards: 'gold:500, exp:300, item:rare_axe',
    },
    {
      waveId: 'wave-2-1',
      stageName: 'Desert Ruins',
      waveNumber: 1,
      enemyType: 'scorpion',
      count: 8,
      spawnDelay: 1,
      isBoss: false,
      rewards: 'gold:180, exp:90',
    },
    {
      waveId: 'wave-2-2',
      stageName: 'Desert Ruins',
      waveNumber: 2,
      enemyType: 'bandit',
      count: 4,
      spawnDelay: 3,
      isBoss: false,
      rewards: 'gold:250, exp:120',
    },
    {
      waveId: 'wave-2-3',
      stageName: 'Desert Ruins',
      waveNumber: 3,
      enemyType: 'sand_elemental',
      count: 2,
      spawnDelay: 4,
      isBoss: false,
      rewards: 'gold:300, exp:150',
    },
    {
      waveId: 'wave-3-1',
      stageName: 'Ice Cavern',
      waveNumber: 1,
      enemyType: 'ice_bat',
      count: 10,
      spawnDelay: 2,
      isBoss: false,
      rewards: 'gold:220, exp:110',
    },
    {
      waveId: 'wave-3-2',
      stageName: 'Ice Cavern',
      waveNumber: 2,
      enemyType: 'frost_golem',
      count: 3,
      spawnDelay: 5,
      isBoss: false,
      rewards: 'gold:350, exp:175',
    },
    {
      waveId: 'wave-3-boss',
      stageName: 'Ice Cavern',
      waveNumber: 3,
      enemyType: 'ice_dragon',
      count: 1,
      spawnDelay: 6,
      isBoss: true,
      rewards: 'gold:1000, exp:500, item:frost_blade',
    },
  ],
});

// Drop Table Template
export const getDropTableTemplate = (): GameDataTemplate => ({
  type: 'dropTable',
  name: 'Drop Table / Loot Table',
  columns: [
    {
      id: 'dropId',
      name: 'Drop ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'Drop ID is required' },
    },
    {
      id: 'sourceType',
      name: 'Source Type',
      type: 'select',
      width: 120,
      options: ['enemy', 'chest', 'quest', 'boss', 'event'],
    },
    {
      id: 'sourceName',
      name: 'Source Name',
      type: 'text',
      width: 150,
    },
    {
      id: 'itemId',
      name: 'Item ID',
      type: 'text',
      width: 120,
    },
    {
      id: 'itemName',
      name: 'Item Name',
      type: 'text',
      width: 150,
    },
    {
      id: 'dropRate',
      name: 'Drop Rate (%)',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 0, max: 100 },
        message: 'Drop rate must be 0-100%',
      },
    },
    {
      id: 'minQuantity',
      name: 'Min Qty',
      type: 'number',
      width: 80,
    },
    {
      id: 'maxQuantity',
      name: 'Max Qty',
      type: 'number',
      width: 80,
    },
    {
      id: 'rarity',
      name: 'Rarity',
      type: 'select',
      width: 100,
      options: ['common', 'uncommon', 'rare', 'epic', 'legendary', 'mythic'],
    },
  ],
  sampleData: [
    {
      dropId: 'drop-goblin-001',
      sourceType: 'enemy',
      sourceName: 'Goblin',
      itemId: 'item-gold',
      itemName: 'Gold',
      dropRate: 80,
      minQuantity: 5,
      maxQuantity: 15,
      rarity: 'common',
    },
    {
      dropId: 'drop-goblin-002',
      sourceType: 'enemy',
      sourceName: 'Goblin',
      itemId: 'item-dagger',
      itemName: 'Rusty Dagger',
      dropRate: 15,
      minQuantity: 1,
      maxQuantity: 1,
      rarity: 'common',
    },
    {
      dropId: 'drop-dragon-001',
      sourceType: 'boss',
      sourceName: 'Ancient Dragon',
      itemId: 'item-scale',
      itemName: 'Dragon Scale',
      dropRate: 100,
      minQuantity: 3,
      maxQuantity: 7,
      rarity: 'epic',
    },
    {
      dropId: 'drop-dragon-002',
      sourceType: 'boss',
      sourceName: 'Ancient Dragon',
      itemId: 'item-sword',
      itemName: 'Dragon Slayer Sword',
      dropRate: 5,
      minQuantity: 1,
      maxQuantity: 1,
      rarity: 'legendary',
    },
    {
      dropId: 'drop-chest-001',
      sourceType: 'chest',
      sourceName: 'Wooden Chest',
      itemId: 'item-potion',
      itemName: 'Health Potion',
      dropRate: 60,
      minQuantity: 2,
      maxQuantity: 5,
      rarity: 'common',
    },
    {
      dropId: 'drop-chest-002',
      sourceType: 'chest',
      sourceName: 'Golden Chest',
      itemId: 'item-gem',
      itemName: 'Ruby',
      dropRate: 25,
      minQuantity: 1,
      maxQuantity: 3,
      rarity: 'rare',
    },
    {
      dropId: 'drop-quest-001',
      sourceType: 'quest',
      sourceName: 'Dragon Slayer Quest',
      itemId: 'item-armor',
      itemName: 'Legendary Armor',
      dropRate: 100,
      minQuantity: 1,
      maxQuantity: 1,
      rarity: 'legendary',
    },
    {
      dropId: 'drop-event-001',
      sourceType: 'event',
      sourceName: 'Winter Festival',
      itemId: 'item-snowflake',
      itemName: 'Magic Snowflake',
      dropRate: 30,
      minQuantity: 1,
      maxQuantity: 5,
      rarity: 'rare',
    },
    {
      dropId: 'drop-boss-001',
      sourceType: 'boss',
      sourceName: 'Ice Lord',
      itemId: 'item-staff',
      itemName: 'Frozen Staff',
      dropRate: 20,
      minQuantity: 1,
      maxQuantity: 1,
      rarity: 'epic',
    },
    {
      dropId: 'drop-enemy-001',
      sourceType: 'enemy',
      sourceName: 'Skeleton',
      itemId: 'item-bone',
      itemName: 'Ancient Bone',
      dropRate: 45,
      minQuantity: 1,
      maxQuantity: 3,
      rarity: 'uncommon',
    },
  ],
});

// Achievement Template
export const getAchievementTemplate = (): GameDataTemplate => ({
  type: 'achievement',
  name: 'Achievement / Trophy Data',
  columns: [
    {
      id: 'achievementId',
      name: 'Achievement ID',
      type: 'text',
      width: 150,
      validation: { type: 'required', message: 'Achievement ID is required' },
    },
    {
      id: 'name',
      name: 'Name',
      type: 'text',
      width: 180,
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 250,
    },
    {
      id: 'category',
      name: 'Category',
      type: 'select',
      width: 120,
      options: ['combat', 'exploration', 'collection', 'social', 'special'],
    },
    {
      id: 'tier',
      name: 'Tier',
      type: 'select',
      width: 100,
      options: ['bronze', 'silver', 'gold', 'platinum'],
    },
    {
      id: 'points',
      name: 'Points',
      type: 'number',
      width: 80,
    },
    {
      id: 'requirement',
      name: 'Requirement',
      type: 'text',
      width: 200,
    },
    {
      id: 'reward',
      name: 'Reward',
      type: 'text',
      width: 150,
    },
    {
      id: 'isHidden',
      name: 'Hidden',
      type: 'boolean',
      width: 80,
    },
  ],
  sampleData: [
    {
      achievementId: 'ach-first-kill',
      name: 'First Blood',
      description: 'Defeat your first enemy',
      category: 'combat',
      tier: 'bronze',
      points: 10,
      requirement: 'enemy_kills >= 1',
      reward: 'title:Newbie Hunter',
      isHidden: false,
    },
    {
      achievementId: 'ach-hundred-kills',
      name: 'Slayer',
      description: 'Defeat 100 enemies',
      category: 'combat',
      tier: 'silver',
      points: 50,
      requirement: 'enemy_kills >= 100',
      reward: 'title:Monster Slayer, gold:1000',
      isHidden: false,
    },
    {
      achievementId: 'ach-boss-defeat',
      name: 'Dragon Slayer',
      description: 'Defeat the Ancient Dragon',
      category: 'combat',
      tier: 'gold',
      points: 100,
      requirement: 'boss_dragon_defeated == true',
      reward: 'item:dragon_sword, gold:5000',
      isHidden: false,
    },
    {
      achievementId: 'ach-explorer',
      name: 'World Explorer',
      description: 'Visit all regions of the map',
      category: 'exploration',
      tier: 'silver',
      points: 75,
      requirement: 'regions_visited >= 10',
      reward: 'title:Explorer, map:full_map',
      isHidden: false,
    },
    {
      achievementId: 'ach-collector',
      name: 'Legendary Collector',
      description: 'Collect 10 legendary items',
      category: 'collection',
      tier: 'gold',
      points: 150,
      requirement: 'legendary_items >= 10',
      reward: 'item:collector_trophy, gold:10000',
      isHidden: false,
    },
    {
      achievementId: 'ach-social',
      name: 'Social Butterfly',
      description: 'Make 50 friends in the game',
      category: 'social',
      tier: 'bronze',
      points: 30,
      requirement: 'friends_count >= 50',
      reward: 'title:Popular, gold:500',
      isHidden: false,
    },
    {
      achievementId: 'ach-secret',
      name: '???',
      description: 'Find the hidden shrine',
      category: 'special',
      tier: 'platinum',
      points: 200,
      requirement: 'secret_shrine_found == true',
      reward: 'item:ancient_artifact',
      isHidden: true,
    },
    {
      achievementId: 'ach-speedrun',
      name: 'Speed Demon',
      description: 'Complete main quest in under 10 hours',
      category: 'special',
      tier: 'platinum',
      points: 250,
      requirement: 'main_quest_time <= 600',
      reward: 'title:Speed Runner, item:time_boots',
      isHidden: false,
    },
    {
      achievementId: 'ach-no-death',
      name: 'Immortal',
      description: 'Complete the game without dying',
      category: 'combat',
      tier: 'platinum',
      points: 300,
      requirement: 'death_count == 0 && game_completed == true',
      reward: 'title:Immortal, item:invincibility_amulet',
      isHidden: false,
    },
    {
      achievementId: 'ach-master-crafter',
      name: 'Master Crafter',
      description: 'Craft 100 items',
      category: 'collection',
      tier: 'gold',
      points: 100,
      requirement: 'items_crafted >= 100',
      reward: 'title:Master Crafter, gold:3000',
      isHidden: false,
    },
  ],
});

// Tutorial Template
export const getTutorialTemplate = (): GameDataTemplate => ({
  type: 'tutorial',
  name: 'Tutorial / Onboarding Steps',
  columns: [
    {
      id: 'stepId',
      name: 'Step ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'Step ID is required' },
    },
    {
      id: 'stepNumber',
      name: 'Step #',
      type: 'number',
      width: 80,
    },
    {
      id: 'title',
      name: 'Title',
      type: 'text',
      width: 180,
    },
    {
      id: 'description',
      name: 'Description',
      type: 'text',
      width: 300,
    },
    {
      id: 'triggerType',
      name: 'Trigger Type',
      type: 'select',
      width: 120,
      options: ['auto', 'click', 'event', 'manual'],
    },
    {
      id: 'targetElement',
      name: 'Target Element',
      type: 'text',
      width: 150,
    },
    {
      id: 'highlightType',
      name: 'Highlight Type',
      type: 'select',
      width: 120,
      options: ['spotlight', 'arrow', 'overlay', 'pulse'],
    },
    {
      id: 'canSkip',
      name: 'Can Skip',
      type: 'boolean',
      width: 80,
    },
    {
      id: 'reward',
      name: 'Reward',
      type: 'text',
      width: 150,
    },
  ],
  sampleData: [
    {
      stepId: 'tutorial-001',
      stepNumber: 1,
      title: 'Welcome!',
      description: 'Welcome to the game! Let me show you around.',
      triggerType: 'auto',
      targetElement: '#main-menu',
      highlightType: 'spotlight',
      canSkip: false,
      reward: 'gold:100',
    },
    {
      stepId: 'tutorial-002',
      stepNumber: 2,
      title: 'Movement',
      description: 'Use WASD or arrow keys to move your character.',
      triggerType: 'auto',
      targetElement: '#player-character',
      highlightType: 'arrow',
      canSkip: false,
      reward: '',
    },
    {
      stepId: 'tutorial-003',
      stepNumber: 3,
      title: 'Combat Basics',
      description: 'Click on enemies to attack them. Watch your health bar!',
      triggerType: 'click',
      targetElement: '#enemy-target',
      highlightType: 'pulse',
      canSkip: false,
      reward: 'exp:50',
    },
    {
      stepId: 'tutorial-004',
      stepNumber: 4,
      title: 'Inventory',
      description: 'Press I to open your inventory. Here you can manage items.',
      triggerType: 'event',
      targetElement: '#inventory-button',
      highlightType: 'spotlight',
      canSkip: true,
      reward: 'item:health_potion',
    },
    {
      stepId: 'tutorial-005',
      stepNumber: 5,
      title: 'Skills',
      description: 'Press numbers 1-5 to use your skills in combat.',
      triggerType: 'auto',
      targetElement: '#skill-bar',
      highlightType: 'overlay',
      canSkip: true,
      reward: '',
    },
    {
      stepId: 'tutorial-006',
      stepNumber: 6,
      title: 'Quest Log',
      description: 'Press Q to view your active quests and objectives.',
      triggerType: 'event',
      targetElement: '#quest-log',
      highlightType: 'spotlight',
      canSkip: true,
      reward: 'gold:200',
    },
    {
      stepId: 'tutorial-007',
      stepNumber: 7,
      title: 'Map',
      description: 'Press M to open the world map and fast travel.',
      triggerType: 'manual',
      targetElement: '#map-button',
      highlightType: 'arrow',
      canSkip: true,
      reward: '',
    },
    {
      stepId: 'tutorial-008',
      stepNumber: 8,
      title: 'Character Stats',
      description: 'Press C to view your character stats and equipment.',
      triggerType: 'event',
      targetElement: '#character-menu',
      highlightType: 'spotlight',
      canSkip: true,
      reward: 'gold:150',
    },
    {
      stepId: 'tutorial-009',
      stepNumber: 9,
      title: 'Save Your Progress',
      description: 'Your game auto-saves, but you can manually save anytime.',
      triggerType: 'auto',
      targetElement: '#save-button',
      highlightType: 'pulse',
      canSkip: true,
      reward: '',
    },
    {
      stepId: 'tutorial-010',
      stepNumber: 10,
      title: 'Tutorial Complete!',
      description: 'You are ready to begin your adventure. Good luck!',
      triggerType: 'auto',
      targetElement: '#game-world',
      highlightType: 'overlay',
      canSkip: false,
      reward: 'gold:500, exp:100, title:Tutorial_Graduate',
    },
  ],
});

// Season Pass Template
export const getSeasonPassTemplate = (): GameDataTemplate => ({
  type: 'seasonPass',
  name: 'Season Pass / Battle Pass',
  columns: [
    {
      id: 'tier',
      name: 'Tier',
      type: 'number',
      width: 80,
      validation: {
        type: 'range',
        params: { min: 1, max: 100 },
      },
    },
    {
      id: 'xpRequired',
      name: 'XP Required',
      type: 'number',
      width: 120,
    },
    {
      id: 'freeRewardType',
      name: 'Free Reward Type',
      type: 'select',
      width: 150,
      options: ['currency', 'item', 'skin', 'emote', 'title', 'none'],
    },
    {
      id: 'freeRewardId',
      name: 'Free Reward ID',
      type: 'text',
      width: 150,
    },
    {
      id: 'freeRewardQty',
      name: 'Free Qty',
      type: 'number',
      width: 80,
    },
    {
      id: 'premiumRewardType',
      name: 'Premium Reward Type',
      type: 'select',
      width: 150,
      options: ['currency', 'item', 'skin', 'emote', 'title', 'exclusive'],
    },
    {
      id: 'premiumRewardId',
      name: 'Premium Reward ID',
      type: 'text',
      width: 150,
    },
    {
      id: 'premiumRewardQty',
      name: 'Premium Qty',
      type: 'number',
      width: 80,
    },
  ],
  sampleData: [
    {
      tier: 1,
      xpRequired: 100,
      freeRewardType: 'currency',
      freeRewardId: 'gold',
      freeRewardQty: 500,
      premiumRewardType: 'item',
      premiumRewardId: 'rare-sword-001',
      premiumRewardQty: 1,
    },
    {
      tier: 2,
      xpRequired: 250,
      freeRewardType: 'currency',
      freeRewardId: 'gold',
      freeRewardQty: 750,
      premiumRewardType: 'skin',
      premiumRewardId: 'warrior-skin-blue',
      premiumRewardQty: 1,
    },
    {
      tier: 3,
      xpRequired: 450,
      freeRewardType: 'item',
      freeRewardId: 'health-potion',
      freeRewardQty: 5,
      premiumRewardType: 'currency',
      premiumRewardId: 'gems',
      premiumRewardQty: 100,
    },
    {
      tier: 4,
      xpRequired: 700,
      freeRewardType: 'currency',
      freeRewardId: 'gold',
      freeRewardQty: 1000,
      premiumRewardType: 'item',
      premiumRewardId: 'epic-armor-001',
      premiumRewardQty: 1,
    },
    {
      tier: 5,
      xpRequired: 1000,
      freeRewardType: 'emote',
      freeRewardId: 'wave-emote',
      freeRewardQty: 1,
      premiumRewardType: 'exclusive',
      premiumRewardId: 'legendary-mount',
      premiumRewardQty: 1,
    },
    {
      tier: 6,
      xpRequired: 1400,
      freeRewardType: 'currency',
      freeRewardId: 'gold',
      freeRewardQty: 1500,
      premiumRewardType: 'skin',
      premiumRewardId: 'mage-skin-gold',
      premiumRewardQty: 1,
    },
    {
      tier: 7,
      xpRequired: 1900,
      freeRewardType: 'item',
      freeRewardId: 'mana-potion',
      freeRewardQty: 5,
      premiumRewardType: 'currency',
      premiumRewardId: 'gems',
      premiumRewardQty: 200,
    },
    {
      tier: 8,
      xpRequired: 2500,
      freeRewardType: 'title',
      freeRewardId: 'season-warrior',
      freeRewardQty: 1,
      premiumRewardType: 'item',
      premiumRewardId: 'mythic-weapon-001',
      premiumRewardQty: 1,
    },
    {
      tier: 9,
      xpRequired: 3200,
      freeRewardType: 'currency',
      freeRewardId: 'gold',
      freeRewardQty: 2000,
      premiumRewardType: 'exclusive',
      premiumRewardId: 'premium-pet',
      premiumRewardQty: 1,
    },
    {
      tier: 10,
      xpRequired: 4000,
      freeRewardType: 'emote',
      freeRewardId: 'victory-dance',
      freeRewardQty: 1,
      premiumRewardType: 'exclusive',
      premiumRewardId: 'ultimate-skin-bundle',
      premiumRewardQty: 1,
    },
  ],
});

// Gacha Pool Template
export const getGachaPoolTemplate = (): GameDataTemplate => ({
  type: 'gachaPool',
  name: 'Gacha / Loot Box Pool',
  columns: [
    {
      id: 'poolId',
      name: 'Pool ID',
      type: 'text',
      width: 120,
      validation: { type: 'required', message: 'Pool ID is required' },
    },
    {
      id: 'poolName',
      name: 'Pool Name',
      type: 'text',
      width: 150,
    },
    {
      id: 'itemId',
      name: 'Item ID',
      type: 'text',
      width: 120,
    },
    {
      id: 'itemName',
      name: 'Item Name',
      type: 'text',
      width: 150,
    },
    {
      id: 'rarity',
      name: 'Rarity',
      type: 'select',
      width: 100,
      options: ['common', 'uncommon', 'rare', 'epic', 'legendary', 'mythic'],
    },
    {
      id: 'dropRate',
      name: 'Drop Rate (%)',
      type: 'number',
      width: 100,
      validation: {
        type: 'range',
        params: { min: 0, max: 100 },
        message: 'Drop rate must be 0-100%',
      },
    },
    {
      id: 'pityCounter',
      name: 'Pity Counter',
      type: 'number',
      width: 100,
    },
    {
      id: 'weight',
      name: 'Weight',
      type: 'number',
      width: 80,
    },
    {
      id: 'isRateUp',
      name: 'Rate Up',
      type: 'boolean',
      width: 80,
    },
  ],
  sampleData: [
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'hero-001',
      itemName: 'Knight Hero',
      rarity: 'legendary',
      dropRate: 0.6,
      pityCounter: 90,
      weight: 1,
      isRateUp: false,
    },
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'hero-002',
      itemName: 'Mage Hero',
      rarity: 'legendary',
      dropRate: 0.6,
      pityCounter: 90,
      weight: 1,
      isRateUp: false,
    },
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'weapon-001',
      itemName: 'Epic Sword',
      rarity: 'epic',
      dropRate: 5.0,
      pityCounter: 10,
      weight: 5,
      isRateUp: false,
    },
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'weapon-002',
      itemName: 'Epic Staff',
      rarity: 'epic',
      dropRate: 5.0,
      pityCounter: 10,
      weight: 5,
      isRateUp: false,
    },
    {
      poolId: 'rate-up-banner',
      poolName: 'Featured Hero Banner',
      itemId: 'hero-003',
      itemName: 'Dragon Knight',
      rarity: 'legendary',
      dropRate: 1.6,
      pityCounter: 90,
      weight: 1,
      isRateUp: true,
    },
    {
      poolId: 'rate-up-banner',
      poolName: 'Featured Hero Banner',
      itemId: 'weapon-003',
      itemName: 'Dragon Blade',
      rarity: 'epic',
      dropRate: 10.0,
      pityCounter: 10,
      weight: 10,
      isRateUp: true,
    },
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'item-001',
      itemName: 'Rare Armor',
      rarity: 'rare',
      dropRate: 12.0,
      pityCounter: 0,
      weight: 12,
      isRateUp: false,
    },
    {
      poolId: 'standard-banner',
      poolName: 'Standard Banner',
      itemId: 'item-002',
      itemName: 'Common Potion',
      rarity: 'common',
      dropRate: 40.0,
      pityCounter: 0,
      weight: 40,
      isRateUp: false,
    },
    {
      poolId: 'limited-banner',
      poolName: 'Limited Time Banner',
      itemId: 'hero-004',
      itemName: 'Phoenix Queen',
      rarity: 'mythic',
      dropRate: 0.3,
      pityCounter: 100,
      weight: 1,
      isRateUp: true,
    },
    {
      poolId: 'limited-banner',
      poolName: 'Limited Time Banner',
      itemId: 'weapon-004',
      itemName: 'Phoenix Wings',
      rarity: 'legendary',
      dropRate: 2.0,
      pityCounter: 90,
      weight: 2,
      isRateUp: true,
    },
  ],
});
